{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to Sloth CI! \u00b6 Sloth CI is a lightweight, standalone CI server. Via extensions, Sloth CI offers detailed logs, build status badges, email notifications, and webhooks. Run Locally \u00b6 Deploy the project with Poetry: $ poetry install Run locally with: $ poetry run sci start Check that the instance is running: $ poetry run sci status Build the docs: $ poetry run foliant make site -p docs","title":"Welcome to Sloth CI!"},{"location":"index.html#welcome-to-sloth-ci","text":"Sloth CI is a lightweight, standalone CI server. Via extensions, Sloth CI offers detailed logs, build status badges, email notifications, and webhooks.","title":"Welcome to Sloth CI!"},{"location":"index.html#run-locally","text":"Deploy the project with Poetry: $ poetry install Run locally with: $ poetry run sci start Check that the instance is running: $ poetry run sci status Build the docs: $ poetry run foliant make site -p docs","title":"Run Locally"},{"location":"api.html","text":"API Reference \u00b6 Sloth CI's API lets you restart and stop a running server, create and remove apps, list app logs and view app build history. The API runs on the host and port specified in the server config . It's protected from unauthorized access with basic auth; the access credentials are also stored in the server config. The API returns data in JSON format. There're three ways to call an API method: Use Sloth CI's CLI : $ sci info test Config File Last Build Message Last Build Timestamp ----------------- ------------------- ------------------------ /path/to/test.yml Completed 2 /2 Thu Nov 5 00 :47:52 2015 Visit http://mydomain.com:8080/?action=info&listen_point=test . Send POST requests with form parameters: $ curl -u login:password -F action = info -F listen_point = test http://mydomain.com:8080 { \"config_file\" : \"/path/to/test.yml\" , \"last_build_status_message\" : \"Completed 2/2\" , \"last_build_status_level\" : \"INFO\" , \"last_build_timestamp\" : 1621191160 .9056282 } Methods \u00b6 create \u00b6 Create an app from the given config string: $ curl -u login:password -F action = create -F config_string = $( cat test.yml ) http://mydomain:8080 \"test\" config_string URL-encoded app config . bind \u00b6 If the app is created from a config file, bind them together, so Sloth CI would know where to read the config from when you reload the app: $ curl -u login:password -F action = bind -F listen_point = test -F config_file = /path/to/test.yml http://mydomain:8080 null listen_point App listen point. config_file Path to the config file ti bind with the app. The create CLI command runs the create and bind API methods. trigger \u00b6 Trigger app's actions: $ curl -u login:password -F action = trigger -F listen_point = test -F foo = bar http://mydomain:8080 null Trigger app's actions and wait for them to complete: $ curl -u login:password -F action = trigger -F listen_point = test -F wait = 1 -F success_url = http://example.com/success -F fail_url = http://example.com/fail -F foo = bar http://mydomain:8080 \"Completed 2/2\" listen_point App listen point. wait optional Wait for the actions to complete. success_url optional URL to redirect to after a successful build run. Used only with wait . fail_url optional URL to redirect to after a failed or incomplete build run. Used only with wait . custom params optional Any number of params to replace placeholders in the actions. info \u00b6 Get app config file path and last build status: $ curl -u login:password -F action = info -F listen_point = test -s http://mydomain:8080 | jq { \"config_file\" : \"C:\\\\Users\\\\moigagoo\\\\Projects\\\\sloth-ci\\\\test.yml\" , \"last_build_status_level\" : \"INFO\" , \"last_build_status_message\" : \"Completed 2/2\" , \"last_build_timestamp\" : 1448695186 .978541 } history \u00b6 Get app build history: $ curl -u login:password -F action = history -F listen_point = test -s http://mydomain:8080 | jq [ { \"level_name\" : \"INFO\" , \"level_number\" : 20 , \"logger_name\" : \"test.build\" , \"message\" : \"Completed 2/2\" , \"timestamp\" : 1448695186 .978541 } , ... Paginate and filter by status: $ curl -u login:password -F action = history -F listen_point = test -F from_page = 3 -F per_page = 2 -F level = 10 -s http://mydomain:8080 | jq [ { \"level_name\" : \"INFO\" , \"level_number\" : 20 , \"logger_name\" : \"test.exec\" , \"message\" : \"Executing action: PowerShell echo Good morning!\" , \"timestamp\" : 1448695185 .3463366 } , ... listen_point App listen point. from_page , to_page , per_page Pagination params. By default, from_page = 1, to_page = from_page , per_page = 10. level Minimal log level to show: 40 ERROR, failed builds. 30 WARNING, partially completed builds. 20 (default) INFO, completed builds. 10 DEBUG, trigger events. logs \u00b6 Get app logs: $ curl -u login:password -F action = logs -F listen_point = test -s http://mydomain:8080 | jq [ { \"level_name\" : \"INFO\" , \"level_number\" : 20 , \"logger_name\" : \"test.build\" , \"message\" : \"Completed 2/2\" , \"timestamp\" : 1448695186 .978541 } , ... Paginate and filter by log level: $ curl -u login:password -F action = logs -F listen_point = test -F from_page = 3 per_page = 2 level = 10 -s http://mydomain:8080 | jq [ { \"level_name\" : \"INFO\" , \"level_number\" : 20 , \"logger_name\" : \"test.exec\" , \"message\" : \"Executing action: PowerShell echo Good morning!\" , \"timestamp\" : 1448695185 .3463366 } , ... listen_point App listen point. from_page , to_page , per_page Pagination params. By default, from_page = 1, to_page = from_page , per_page = 10. level Minimal log level to show: 50 CRITICAL, errors that don't allow apps to be created, e.g missing validator. 40 ERROR, missing extension and failed builds. 30 WARNING, partially completed builds. 20 (default) INFO, completed builds. 10 DEBUG, stdout and stderr. list \u00b6 List existing app listen points: $ curl -u login:password -F action = list -s http://mydomain:8080 | jq [ \"test\" ] remove \u00b6 Remove the app: $ curl -u login:password -F action = remove -F listen_point = test http://mydomain:8080 version \u00b6 Get the version of the Sloth CI server: $ curl -u login:password -F action = version http://mydomain:8080 \"2.0.1\" restart \u00b6 Restart the Sloth CI server: $ curl -u login:password -F action = restart http://mydomain:8080 null stop \u00b6 Stop the Sloth CI server: $ curl -u login:password -F action = stop http://mydomain:8080 null","title":"API Reference"},{"location":"api.html#api-reference","text":"Sloth CI's API lets you restart and stop a running server, create and remove apps, list app logs and view app build history. The API runs on the host and port specified in the server config . It's protected from unauthorized access with basic auth; the access credentials are also stored in the server config. The API returns data in JSON format. There're three ways to call an API method: Use Sloth CI's CLI : $ sci info test Config File Last Build Message Last Build Timestamp ----------------- ------------------- ------------------------ /path/to/test.yml Completed 2 /2 Thu Nov 5 00 :47:52 2015 Visit http://mydomain.com:8080/?action=info&listen_point=test . Send POST requests with form parameters: $ curl -u login:password -F action = info -F listen_point = test http://mydomain.com:8080 { \"config_file\" : \"/path/to/test.yml\" , \"last_build_status_message\" : \"Completed 2/2\" , \"last_build_status_level\" : \"INFO\" , \"last_build_timestamp\" : 1621191160 .9056282 }","title":"API Reference"},{"location":"api.html#methods","text":"","title":"Methods"},{"location":"api.html#create","text":"Create an app from the given config string: $ curl -u login:password -F action = create -F config_string = $( cat test.yml ) http://mydomain:8080 \"test\" config_string URL-encoded app config .","title":"create"},{"location":"api.html#bind","text":"If the app is created from a config file, bind them together, so Sloth CI would know where to read the config from when you reload the app: $ curl -u login:password -F action = bind -F listen_point = test -F config_file = /path/to/test.yml http://mydomain:8080 null listen_point App listen point. config_file Path to the config file ti bind with the app. The create CLI command runs the create and bind API methods.","title":"bind"},{"location":"api.html#trigger","text":"Trigger app's actions: $ curl -u login:password -F action = trigger -F listen_point = test -F foo = bar http://mydomain:8080 null Trigger app's actions and wait for them to complete: $ curl -u login:password -F action = trigger -F listen_point = test -F wait = 1 -F success_url = http://example.com/success -F fail_url = http://example.com/fail -F foo = bar http://mydomain:8080 \"Completed 2/2\" listen_point App listen point. wait optional Wait for the actions to complete. success_url optional URL to redirect to after a successful build run. Used only with wait . fail_url optional URL to redirect to after a failed or incomplete build run. Used only with wait . custom params optional Any number of params to replace placeholders in the actions.","title":"trigger"},{"location":"api.html#info","text":"Get app config file path and last build status: $ curl -u login:password -F action = info -F listen_point = test -s http://mydomain:8080 | jq { \"config_file\" : \"C:\\\\Users\\\\moigagoo\\\\Projects\\\\sloth-ci\\\\test.yml\" , \"last_build_status_level\" : \"INFO\" , \"last_build_status_message\" : \"Completed 2/2\" , \"last_build_timestamp\" : 1448695186 .978541 }","title":"info"},{"location":"api.html#history","text":"Get app build history: $ curl -u login:password -F action = history -F listen_point = test -s http://mydomain:8080 | jq [ { \"level_name\" : \"INFO\" , \"level_number\" : 20 , \"logger_name\" : \"test.build\" , \"message\" : \"Completed 2/2\" , \"timestamp\" : 1448695186 .978541 } , ... Paginate and filter by status: $ curl -u login:password -F action = history -F listen_point = test -F from_page = 3 -F per_page = 2 -F level = 10 -s http://mydomain:8080 | jq [ { \"level_name\" : \"INFO\" , \"level_number\" : 20 , \"logger_name\" : \"test.exec\" , \"message\" : \"Executing action: PowerShell echo Good morning!\" , \"timestamp\" : 1448695185 .3463366 } , ... listen_point App listen point. from_page , to_page , per_page Pagination params. By default, from_page = 1, to_page = from_page , per_page = 10. level Minimal log level to show: 40 ERROR, failed builds. 30 WARNING, partially completed builds. 20 (default) INFO, completed builds. 10 DEBUG, trigger events.","title":"history"},{"location":"api.html#logs","text":"Get app logs: $ curl -u login:password -F action = logs -F listen_point = test -s http://mydomain:8080 | jq [ { \"level_name\" : \"INFO\" , \"level_number\" : 20 , \"logger_name\" : \"test.build\" , \"message\" : \"Completed 2/2\" , \"timestamp\" : 1448695186 .978541 } , ... Paginate and filter by log level: $ curl -u login:password -F action = logs -F listen_point = test -F from_page = 3 per_page = 2 level = 10 -s http://mydomain:8080 | jq [ { \"level_name\" : \"INFO\" , \"level_number\" : 20 , \"logger_name\" : \"test.exec\" , \"message\" : \"Executing action: PowerShell echo Good morning!\" , \"timestamp\" : 1448695185 .3463366 } , ... listen_point App listen point. from_page , to_page , per_page Pagination params. By default, from_page = 1, to_page = from_page , per_page = 10. level Minimal log level to show: 50 CRITICAL, errors that don't allow apps to be created, e.g missing validator. 40 ERROR, missing extension and failed builds. 30 WARNING, partially completed builds. 20 (default) INFO, completed builds. 10 DEBUG, stdout and stderr.","title":"logs"},{"location":"api.html#list","text":"List existing app listen points: $ curl -u login:password -F action = list -s http://mydomain:8080 | jq [ \"test\" ]","title":"list"},{"location":"api.html#remove","text":"Remove the app: $ curl -u login:password -F action = remove -F listen_point = test http://mydomain:8080","title":"remove"},{"location":"api.html#version","text":"Get the version of the Sloth CI server: $ curl -u login:password -F action = version http://mydomain:8080 \"2.0.1\"","title":"version"},{"location":"api.html#restart","text":"Restart the Sloth CI server: $ curl -u login:password -F action = restart http://mydomain:8080 null","title":"restart"},{"location":"api.html#stop","text":"Stop the Sloth CI server: $ curl -u login:password -F action = stop http://mydomain:8080 null","title":"stop"},{"location":"app_config.html","text":"App Config \u00b6 App config contains the settings for a Sloth CI app: unique listen point provider that triggers actions actions to run, params to run them with, and the directory to run them in extensions Sample app config: id : myapp # or \"name: myapp\" , or \"listen_point: myapp\" provider : github : owner : username repo : repo branches : - dev - staging actions : - ! critical touch { filename } - echo \"The branch is {branch}\" >> { filename } params : filename : myfile . txt work_dir : ~/ apps / myapp exec_timeout : 5 extensions : debug_logs : module : file_logs path : /var/log/myapp/ filename : myapp_debug . log level : DEBUG The config is in YAML format. When you create an app with the create command, provide the config as a path to a .yml file: $ sci create /path/to/test.yml When you create an app via the API , provide the config as a URL-encoded string: $ http -f -a login:password localhost:8080 \\ action = create \\ config_string = $( cat test.yml ) HTTP/1.1 201 Created Content-Length: 6 Content-Type: application/json Date: Fri, 27 Nov 2015 21 :39:58 GMT Server: CherryPy/3.8.0 \"test\" Listen Point \u00b6 required Every app has a unique URI called listen point . If the server is running on example.com:8080 , and the app's listen point is test , the full path to the app is http://example.com:8080/test . Listen point can contain slashes. Listen point must not start or end with a slash. Provider \u00b6 Although you can trigger app's actions manually, Sloth CI's true strength is to run actions automatically, e.g., when you push to GitHub. A service that sends the trigger events is called a provider . To work with a certain provider, Sloth CI must have a matching validator installed. The provider param in an app config actually points to the matching validator . See available validators and their params \u2192 Tip If you want to trigger the app manually only, skip the whole provider section. Actions \u00b6 List of actions to run. Each action is a shell command. Commands are executed one by one top to bottom. Actions can contain placeholders enclosed between curly brackets: {filename} , {branch} . The placeholders are overridden with values in this order: params from the params section params extracted by the validator params provided with the trigger command or via the trigger API method Actions can contain stream redirects with > and >> . Actions must not contain context changes like cd or source . If you want the whole build to fail when a particular action fails, mark the action with !critical tag. Params \u00b6 Values for the placeholders in actions . Work Dir \u00b6 The directory to run the actions in. By default, the actions are executed in the directory you launched Sloth CI in, i.e., work_dir=\".\" . Tip The work_dir param is optional, but it's highly recommended you to specify it. You want to be 100% sure your rm -rf * runs in the right place. Exec Timeout \u00b6 The maximal allowed time in seconds for an action to run. If an action takes longer than exec_timeout seconds to execute, it's terminated. By default, there's no timeout. Extensions \u00b6 App-level extension declarations. A declaration has a unique name (e.g., debug_logs ) and must contain the extension module name (e.g., file_logs ). Depending on the extension, a declaration can include additional params. For example, File Logs extension has eight params. You can declare the same extension module multiple times under different names: extensions : debug_logs : module : file_logs path : /var/log/myapp/ filename : myapp_debug . log level : DEBUG info_logs : module : file_logs path : /var/log/myapp/ filename : myapp_info . log level : INFO No extensions are declared by default.","title":"App Config"},{"location":"app_config.html#app-config","text":"App config contains the settings for a Sloth CI app: unique listen point provider that triggers actions actions to run, params to run them with, and the directory to run them in extensions Sample app config: id : myapp # or \"name: myapp\" , or \"listen_point: myapp\" provider : github : owner : username repo : repo branches : - dev - staging actions : - ! critical touch { filename } - echo \"The branch is {branch}\" >> { filename } params : filename : myfile . txt work_dir : ~/ apps / myapp exec_timeout : 5 extensions : debug_logs : module : file_logs path : /var/log/myapp/ filename : myapp_debug . log level : DEBUG The config is in YAML format. When you create an app with the create command, provide the config as a path to a .yml file: $ sci create /path/to/test.yml When you create an app via the API , provide the config as a URL-encoded string: $ http -f -a login:password localhost:8080 \\ action = create \\ config_string = $( cat test.yml ) HTTP/1.1 201 Created Content-Length: 6 Content-Type: application/json Date: Fri, 27 Nov 2015 21 :39:58 GMT Server: CherryPy/3.8.0 \"test\"","title":"App Config"},{"location":"app_config.html#listen-point","text":"required Every app has a unique URI called listen point . If the server is running on example.com:8080 , and the app's listen point is test , the full path to the app is http://example.com:8080/test . Listen point can contain slashes. Listen point must not start or end with a slash.","title":"Listen Point"},{"location":"app_config.html#provider","text":"Although you can trigger app's actions manually, Sloth CI's true strength is to run actions automatically, e.g., when you push to GitHub. A service that sends the trigger events is called a provider . To work with a certain provider, Sloth CI must have a matching validator installed. The provider param in an app config actually points to the matching validator . See available validators and their params \u2192 Tip If you want to trigger the app manually only, skip the whole provider section.","title":"Provider"},{"location":"app_config.html#actions","text":"List of actions to run. Each action is a shell command. Commands are executed one by one top to bottom. Actions can contain placeholders enclosed between curly brackets: {filename} , {branch} . The placeholders are overridden with values in this order: params from the params section params extracted by the validator params provided with the trigger command or via the trigger API method Actions can contain stream redirects with > and >> . Actions must not contain context changes like cd or source . If you want the whole build to fail when a particular action fails, mark the action with !critical tag.","title":"Actions"},{"location":"app_config.html#params","text":"Values for the placeholders in actions .","title":"Params"},{"location":"app_config.html#work-dir","text":"The directory to run the actions in. By default, the actions are executed in the directory you launched Sloth CI in, i.e., work_dir=\".\" . Tip The work_dir param is optional, but it's highly recommended you to specify it. You want to be 100% sure your rm -rf * runs in the right place.","title":"Work Dir"},{"location":"app_config.html#exec-timeout","text":"The maximal allowed time in seconds for an action to run. If an action takes longer than exec_timeout seconds to execute, it's terminated. By default, there's no timeout.","title":"Exec Timeout"},{"location":"app_config.html#extensions","text":"App-level extension declarations. A declaration has a unique name (e.g., debug_logs ) and must contain the extension module name (e.g., file_logs ). Depending on the extension, a declaration can include additional params. For example, File Logs extension has eight params. You can declare the same extension module multiple times under different names: extensions : debug_logs : module : file_logs path : /var/log/myapp/ filename : myapp_debug . log level : DEBUG info_logs : module : file_logs path : /var/log/myapp/ filename : myapp_info . log level : INFO No extensions are declared by default.","title":"Extensions"},{"location":"changelog.html","text":"Changelog \u00b6 2.2.0 (WIP) \u00b6 Change the convention for naming extension and validator modules to sloth_ci_ext_name and sloth_ci_val_name respectively. Update code for the latest Python. Update dependencies. Switch from Sphinx to Foliant. 2.1.1 \u00b6 Bed, API: Bed: Code refactored to allow extending app listener. 2.1.0 \u00b6 Server config: Auth section can now contain multiple login:password pairs. 2.0.9 \u00b6 CLI: Fixed a critical issue with not working CLI if API auth was provided. 2.0.8 \u00b6 API: Trigger: When invoking trigger directly via web API with wait=1 , you can now define the success_url and fail_url params to be redirected to after the build completes or fails. API: Auth is now optional. 2.0.7 \u00b6 App config: Actions can be marked critical with the !critical tag. 2.0.6 \u00b6 Fixed an issue with incorrectly handled auth alias. 2.0.5 \u00b6 CLI: Failed actions now return non-zero exit code. App config: Aliases for listen_point added: id and name . 2.0.4 \u00b6 Server config: An alias for api_auth added\u2014 auth . 2.0.3 \u00b6 Colorama is now an optional dependency. 2.0.2 \u00b6 Extension would not load if any extension function was missing. Fixed. 2.0.1 \u00b6 API: trigger: wait param added: block until the triggerred actions are completed. Bed: Payload json is now parsed before the request is passed to a validator. CLI: Help texts improved. CLI: trigger: -wait flag added: block until the triggerred actions are completed. Setup: Built-in extensions were not properly installed. Fixed. 2.0.0 \u00b6 API CLI vocabulary changed. API reimplemented as a built-in extension. A single extension can now extend apps, server, and CLI with extend_sloth , extend_bed , and extend_cli functions. CLI: Cliar is now used instead of docopt. Tons of small changes. 1.3.0 \u00b6 Bed: Server extensions now can override all Bed methods. 1.2.9 \u00b6 API: Server: Bind: Config file binding didn't work. Fixed. CLI: Info: Info didn't work. Fixed. 1.2.8 \u00b6 Code cleanup. Bed: Server extension support added. 1.2.7 \u00b6 CLI: history output is now colorized. CLI: Level column hidden from history and info output. 1.2.6 \u00b6 API: Server: info now returns build status levels too. CLI: Colorization is now possible based on any column. CLI: info output is now colorized. 1.2.5 \u00b6 API: info: If the database is unavailable, only build statuses are not returned. API: info: The info method didn't work if the database was unavailable. Fixed. API: Web: Alias for info added: list. API: Web: history, logs: If the database is unavailable, the history and logs methods are still accessible but explicitly return errors. Server config: DB path can only point to a file. Previous decision to allow directories led to ambiguity. Server config: If the DB path was null (or false, or 0), no apps could be created. Fixed. 1.2.4 \u00b6 Build: Exec: Support for stream redirection and shell commands added. Server config: DB path can now point to a directory; sloth.db will be created automatically. Build logging: Trigger events are now logged with level DEBUG, not INFO. Util: SqliteHandler: Exception handling on event emitting added. 1.2.3 \u00b6 Apps with listen points \"_\" and \"x/y\" were not logged. Fixed. Listen points are used to refer to apps instead of names (i.e. slugs). Removed dependency awesome-slugify. Sloth: The \"name\" attribute replaced with \"listen_point\". 1.2.2 \u00b6 CLI: info: Alias added: list. 1.2.1 \u00b6 CLI, API: Logs: If a listen point did not exist, an empty list was returned instead of an error. Fixed. Build: Exec: All failed executions were logged with the same \" init missing cmd\" error. Fixed. Build: Exec: Failed actions are logged as error, not critical. Build: Exec: If an action failed, its stdout and stderr were not logged. Fixed. Build: Exec: In an action fails, its exit code is logged as error. The stdout and stderr are logged as debug, as usual. 1.2.0 \u00b6 Build: Logging: Params are now stored by the exec logger, not the build logger. This keeps build history clean. 1.1.9 \u00b6 Build: Action execution: If stderr is not empty, the action is considered failed. CLI: Logs: Tables are now colorized. Logging: Minor improvements in build logging. New dependency: colorama. Payload handling: Single payload can now trigger multiple builds. Useful for combined pushes with commits from multiple branches. 1.1.8 \u00b6 API: Server: info: Info was broken if at least one app was never triggered. The default timestamp is now 0. Fixed. 1.1.7 \u00b6 API: Server: bind: Local variable e was called before assignment. Fixed. Bed: Create app: Listen point conflict: Wrong variable was referenced in the error message. Fixed. 1.1.6 \u00b6 API: Server: logs: Log level filtering didn't work. Fixed. API: Server: info: The records are now sorted by the last build timestamp. 1.1.5 \u00b6 Ext: Build history: The \"Failed\" status indicates the failed action and the exception raised. Ext: Build history: The \"Triggered\" status indicates params. Logging: The build logger added to Sloth. Logging: The \"processing\" logger renamed to \"exec.\" Sloth: Exec params persisted between builds, resulting in false successes. Fixed. Sloth: Build trigger is now logged with level DEBUG. 1.1.4 \u00b6 CLI: The \"version\" command removed. CLI: Remote server version is now shown in the \"status\" command output. 1.1.3 \u00b6 API: Client: The \"version\" API method support added. API: Server: The \"version\" method added to get the server version. CLI: The \"version\" command added. 1.1.2 \u00b6 Ext: Build history: The \"Triggered\" status is added before action queue execution. 1.1.1 \u00b6 Ext: Build history: Build status was set to 'Never triggered' on every app creation. Fixed. 1.1.0 \u00b6 API: Server: info: The \"last_build_timestamp\" field added to the output. CLI: info: The \"Last Build Timestamp\" column added. 1.0.9 \u00b6 API: Client: The \"history\" API method support added. API: Client: The \"logs\" API method support added. API: Server: info: The \"last_build_status\" field added to the output. API: Server: The \"history\" method added to get paginated app build history. CLI: info: The \"Last Build Status\" column added. CLI: The \"history\" command added. CLI: The \"logs\" command added. DB logging moved to a separate built-in extension. DB build history tracking added as a separate built-in extension. Sloth: Extensions: The \"extend\" function now accepts the extension name + its config instead of just name. 1.0.8 \u00b6 API: The \"logs\" method added to get app logs. Bed: Database logging added by default. Bed: Unbound apps could not be removed on server stop. Fixed. Server config: New section \"paths\" added with params \"access_log\", \"error_log\", and \"db\" point to the access log, error log, and database files respectively. Server config: The \"config_paths\" section moved to the \"paths: configs\" subsection. Server config: The \"log_dir\" param replaced with the \"paths: access_log\" and \"paths: error_log\" params. 1.0.7 \u00b6 CLI: reload: ConnectionError is now properly handled. CLI: reload: If an app's listen point was changed in the bound config file, the newly created app failed to bind to it after being created. Fixed. 1.0.6 \u00b6 Sloth: The \"provider\" section is now optional (some apps should only be triggered manualy). CLI: Glob support added to the \"create\" command. You can now specify glob paths like \"/path/to/configs/*.yml.\" Server config: New section \"config_paths\" added. Apps will be created from the given config files. You can now specify glob paths like \"/path/to/configs/*.yml.\" 1.0.5 \u00b6 API: info: If multiple listen points were passed, an error occured. Fixed. API: info: The listen_point param is now called listen_points (since there can be many of them). CLI: info: Table rows are now always arranged in the same order. CLI: Output messages are now saner. CLI: The status command added to check the Sloth CI server status (running/not running). Core: A new api package with the API server and client parts added. Setup: New dependency added: tabulate. Setup: New optional dependency added: sloth-ci.ext.logs. 1.0.4 \u00b6 API: bind method added. API: create: The config_source param renamed to config_string and can now be only a config string. API: info method added to get the config file bound with an app. Bed: Ability to bind an app with a config file added. CLI: create: The config_source param renamed to config_file and can now be only a filepath. CLI: create command now can accept multiple files. CLI: If connection to the API server failed, the exception is properly handled. CLI: info command added. CLI: reload command added to reload an app or all apps. Useful when the bound config file has updated. CLI: remove command now can accept multiple listen points. 1.0.3 \u00b6 Sloth: Validation: The provider dict was emptied on first payload check, so all the following ones did not work. Fixed. 1.0.2 \u00b6 CLI: trigger: if no params were passed, an error would occur. Fixed. Bed: add_sloth: TypeError is now handled, interpeted as config source is not a file path or a valid config string. API: create: TypeError is now handled, interpeted as config source is not a file path or a valid config string. Using absolute path is advised. CLI: Message on Sloth CI start added. 1.0.1 \u00b6 The \"-d\" (\"--daemon\") CLI flag removed (it was not working anyway). 1.0.0 \u00b6 First major version. Changelog started.","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"changelog.html#220-wip","text":"Change the convention for naming extension and validator modules to sloth_ci_ext_name and sloth_ci_val_name respectively. Update code for the latest Python. Update dependencies. Switch from Sphinx to Foliant.","title":"2.2.0 (WIP)"},{"location":"changelog.html#211","text":"Bed, API: Bed: Code refactored to allow extending app listener.","title":"2.1.1"},{"location":"changelog.html#210","text":"Server config: Auth section can now contain multiple login:password pairs.","title":"2.1.0"},{"location":"changelog.html#209","text":"CLI: Fixed a critical issue with not working CLI if API auth was provided.","title":"2.0.9"},{"location":"changelog.html#208","text":"API: Trigger: When invoking trigger directly via web API with wait=1 , you can now define the success_url and fail_url params to be redirected to after the build completes or fails. API: Auth is now optional.","title":"2.0.8"},{"location":"changelog.html#207","text":"App config: Actions can be marked critical with the !critical tag.","title":"2.0.7"},{"location":"changelog.html#206","text":"Fixed an issue with incorrectly handled auth alias.","title":"2.0.6"},{"location":"changelog.html#205","text":"CLI: Failed actions now return non-zero exit code. App config: Aliases for listen_point added: id and name .","title":"2.0.5"},{"location":"changelog.html#204","text":"Server config: An alias for api_auth added\u2014 auth .","title":"2.0.4"},{"location":"changelog.html#203","text":"Colorama is now an optional dependency.","title":"2.0.3"},{"location":"changelog.html#202","text":"Extension would not load if any extension function was missing. Fixed.","title":"2.0.2"},{"location":"changelog.html#201","text":"API: trigger: wait param added: block until the triggerred actions are completed. Bed: Payload json is now parsed before the request is passed to a validator. CLI: Help texts improved. CLI: trigger: -wait flag added: block until the triggerred actions are completed. Setup: Built-in extensions were not properly installed. Fixed.","title":"2.0.1"},{"location":"changelog.html#200","text":"API CLI vocabulary changed. API reimplemented as a built-in extension. A single extension can now extend apps, server, and CLI with extend_sloth , extend_bed , and extend_cli functions. CLI: Cliar is now used instead of docopt. Tons of small changes.","title":"2.0.0"},{"location":"changelog.html#130","text":"Bed: Server extensions now can override all Bed methods.","title":"1.3.0"},{"location":"changelog.html#129","text":"API: Server: Bind: Config file binding didn't work. Fixed. CLI: Info: Info didn't work. Fixed.","title":"1.2.9"},{"location":"changelog.html#128","text":"Code cleanup. Bed: Server extension support added.","title":"1.2.8"},{"location":"changelog.html#127","text":"CLI: history output is now colorized. CLI: Level column hidden from history and info output.","title":"1.2.7"},{"location":"changelog.html#126","text":"API: Server: info now returns build status levels too. CLI: Colorization is now possible based on any column. CLI: info output is now colorized.","title":"1.2.6"},{"location":"changelog.html#125","text":"API: info: If the database is unavailable, only build statuses are not returned. API: info: The info method didn't work if the database was unavailable. Fixed. API: Web: Alias for info added: list. API: Web: history, logs: If the database is unavailable, the history and logs methods are still accessible but explicitly return errors. Server config: DB path can only point to a file. Previous decision to allow directories led to ambiguity. Server config: If the DB path was null (or false, or 0), no apps could be created. Fixed.","title":"1.2.5"},{"location":"changelog.html#124","text":"Build: Exec: Support for stream redirection and shell commands added. Server config: DB path can now point to a directory; sloth.db will be created automatically. Build logging: Trigger events are now logged with level DEBUG, not INFO. Util: SqliteHandler: Exception handling on event emitting added.","title":"1.2.4"},{"location":"changelog.html#123","text":"Apps with listen points \"_\" and \"x/y\" were not logged. Fixed. Listen points are used to refer to apps instead of names (i.e. slugs). Removed dependency awesome-slugify. Sloth: The \"name\" attribute replaced with \"listen_point\".","title":"1.2.3"},{"location":"changelog.html#122","text":"CLI: info: Alias added: list.","title":"1.2.2"},{"location":"changelog.html#121","text":"CLI, API: Logs: If a listen point did not exist, an empty list was returned instead of an error. Fixed. Build: Exec: All failed executions were logged with the same \" init missing cmd\" error. Fixed. Build: Exec: Failed actions are logged as error, not critical. Build: Exec: If an action failed, its stdout and stderr were not logged. Fixed. Build: Exec: In an action fails, its exit code is logged as error. The stdout and stderr are logged as debug, as usual.","title":"1.2.1"},{"location":"changelog.html#120","text":"Build: Logging: Params are now stored by the exec logger, not the build logger. This keeps build history clean.","title":"1.2.0"},{"location":"changelog.html#119","text":"Build: Action execution: If stderr is not empty, the action is considered failed. CLI: Logs: Tables are now colorized. Logging: Minor improvements in build logging. New dependency: colorama. Payload handling: Single payload can now trigger multiple builds. Useful for combined pushes with commits from multiple branches.","title":"1.1.9"},{"location":"changelog.html#118","text":"API: Server: info: Info was broken if at least one app was never triggered. The default timestamp is now 0. Fixed.","title":"1.1.8"},{"location":"changelog.html#117","text":"API: Server: bind: Local variable e was called before assignment. Fixed. Bed: Create app: Listen point conflict: Wrong variable was referenced in the error message. Fixed.","title":"1.1.7"},{"location":"changelog.html#116","text":"API: Server: logs: Log level filtering didn't work. Fixed. API: Server: info: The records are now sorted by the last build timestamp.","title":"1.1.6"},{"location":"changelog.html#115","text":"Ext: Build history: The \"Failed\" status indicates the failed action and the exception raised. Ext: Build history: The \"Triggered\" status indicates params. Logging: The build logger added to Sloth. Logging: The \"processing\" logger renamed to \"exec.\" Sloth: Exec params persisted between builds, resulting in false successes. Fixed. Sloth: Build trigger is now logged with level DEBUG.","title":"1.1.5"},{"location":"changelog.html#114","text":"CLI: The \"version\" command removed. CLI: Remote server version is now shown in the \"status\" command output.","title":"1.1.4"},{"location":"changelog.html#113","text":"API: Client: The \"version\" API method support added. API: Server: The \"version\" method added to get the server version. CLI: The \"version\" command added.","title":"1.1.3"},{"location":"changelog.html#112","text":"Ext: Build history: The \"Triggered\" status is added before action queue execution.","title":"1.1.2"},{"location":"changelog.html#111","text":"Ext: Build history: Build status was set to 'Never triggered' on every app creation. Fixed.","title":"1.1.1"},{"location":"changelog.html#110","text":"API: Server: info: The \"last_build_timestamp\" field added to the output. CLI: info: The \"Last Build Timestamp\" column added.","title":"1.1.0"},{"location":"changelog.html#109","text":"API: Client: The \"history\" API method support added. API: Client: The \"logs\" API method support added. API: Server: info: The \"last_build_status\" field added to the output. API: Server: The \"history\" method added to get paginated app build history. CLI: info: The \"Last Build Status\" column added. CLI: The \"history\" command added. CLI: The \"logs\" command added. DB logging moved to a separate built-in extension. DB build history tracking added as a separate built-in extension. Sloth: Extensions: The \"extend\" function now accepts the extension name + its config instead of just name.","title":"1.0.9"},{"location":"changelog.html#108","text":"API: The \"logs\" method added to get app logs. Bed: Database logging added by default. Bed: Unbound apps could not be removed on server stop. Fixed. Server config: New section \"paths\" added with params \"access_log\", \"error_log\", and \"db\" point to the access log, error log, and database files respectively. Server config: The \"config_paths\" section moved to the \"paths: configs\" subsection. Server config: The \"log_dir\" param replaced with the \"paths: access_log\" and \"paths: error_log\" params.","title":"1.0.8"},{"location":"changelog.html#107","text":"CLI: reload: ConnectionError is now properly handled. CLI: reload: If an app's listen point was changed in the bound config file, the newly created app failed to bind to it after being created. Fixed.","title":"1.0.7"},{"location":"changelog.html#106","text":"Sloth: The \"provider\" section is now optional (some apps should only be triggered manualy). CLI: Glob support added to the \"create\" command. You can now specify glob paths like \"/path/to/configs/*.yml.\" Server config: New section \"config_paths\" added. Apps will be created from the given config files. You can now specify glob paths like \"/path/to/configs/*.yml.\"","title":"1.0.6"},{"location":"changelog.html#105","text":"API: info: If multiple listen points were passed, an error occured. Fixed. API: info: The listen_point param is now called listen_points (since there can be many of them). CLI: info: Table rows are now always arranged in the same order. CLI: Output messages are now saner. CLI: The status command added to check the Sloth CI server status (running/not running). Core: A new api package with the API server and client parts added. Setup: New dependency added: tabulate. Setup: New optional dependency added: sloth-ci.ext.logs.","title":"1.0.5"},{"location":"changelog.html#104","text":"API: bind method added. API: create: The config_source param renamed to config_string and can now be only a config string. API: info method added to get the config file bound with an app. Bed: Ability to bind an app with a config file added. CLI: create: The config_source param renamed to config_file and can now be only a filepath. CLI: create command now can accept multiple files. CLI: If connection to the API server failed, the exception is properly handled. CLI: info command added. CLI: reload command added to reload an app or all apps. Useful when the bound config file has updated. CLI: remove command now can accept multiple listen points.","title":"1.0.4"},{"location":"changelog.html#103","text":"Sloth: Validation: The provider dict was emptied on first payload check, so all the following ones did not work. Fixed.","title":"1.0.3"},{"location":"changelog.html#102","text":"CLI: trigger: if no params were passed, an error would occur. Fixed. Bed: add_sloth: TypeError is now handled, interpeted as config source is not a file path or a valid config string. API: create: TypeError is now handled, interpeted as config source is not a file path or a valid config string. Using absolute path is advised. CLI: Message on Sloth CI start added.","title":"1.0.2"},{"location":"changelog.html#101","text":"The \"-d\" (\"--daemon\") CLI flag removed (it was not working anyway).","title":"1.0.1"},{"location":"changelog.html#100","text":"First major version. Changelog started.","title":"1.0.0"},{"location":"cli.html","text":"Commands \u00b6 Sloth CI ships with the sci 1 command line utility that lets you control the server and apps with a variety of commands : $ sci COMMAND [ OPTIONS ] ... Some commands have options, e.g. --config , --level . All options have short versions, e.g. -c , -l . Here are the options of the sci command: -c, --config CONFIG Define path to the server config file: # Start Sloth CI with a custom config: $ sci -c path/to/custom_config.yml start -h, --help Show help. Use -h after any command to see its help message. -v, --version Show the version of the locally installed Sloth CI 2 . Commands \u00b6 start \u00b6 Start the Sloth CI server: $ sci start Starting Sloth CI on http://localhost:8080 stop \u00b6 Stop the Sloth CI server: $ sci stop Stopping Sloth CI on http://localhost:8080 restart \u00b6 Restart, i.e., stop then start the Sloth CI server: $ sci restart Restarting Sloth CI on http://localhost:8080 status \u00b6 Aliases: stat , st Get the status (running or not running) and version of the Sloth CI server: $ sci st Sloth CI version 2 .0.1 is running on http://localhost:8080 create \u00b6 Alias: add Create a Sloth CI app from the given config file and bind them: $ sci add myapp.yml App \"myapp\" created App \"myapp\" bound with config file \"myapp.yml\" history \u00b6 Aliases: hist , builds View paginated app build history: $ sci hist -l 10 -p 2 myapp Timestamp Status ------------------------ ------------------------------ Mon Nov 2 21 :47:10 2015 Completed 2 /2 Mon Nov 2 21 :47:05 2015 Triggered, actions in queue: 2 -l, --level LEVEL Minimal log level to show: 40 ERROR, failed builds. 30 WARNING, partially completed builds. 20 (default) INFO, completed builds. 10 DEBUG, trigger events. -f, --from-page FROM_PAGE Pagination starting page. Enumeration start with 1; -f 1 means the latest page. -t, --to-page TO_PAGE Pagination ending page. -p, --per-page PER_PAGE Number of log records per page. -v, --verbose Show Level column. info \u00b6 Show the config file bound with the app and its latest build status: $ sci info myapp Config File Last Build Message Last Build Timestamp ------------ -------------------- ------------------------- myapp.yml Completed 2 /2 Mon Nov 2 21 :47:10 2015 list \u00b6 Alias: ls List all available apps' listen points:: $ sci ls myapp myotherapp logs \u00b6 Alias: lg View paginated app logs: $ sci lg -p 3 myapp Timestamp Message ------------------------ -------------------------------- Mon Nov 2 21 :21:58 2015 Bound with config file myapp.yml Mon Nov 2 21 :21:58 2015 Listening on test Mon Nov 2 21 :13:32 2015 Stopped -l, --level LEVEL Minimal log level to show: 50 CRITICAL, errors that don't allow apps to be created, e.g missing validator. 40 ERROR, missing extension and failed builds. 30 WARNING, partially completed builds. 20 (default) INFO, completed builds. 10 DEBUG, stdout and stderr. -f, --from-page FROM_PAGE Pagination starting page. Enumeration start with 1; -f 1 means the latest page. -t, --to-page TO_PAGE Pagination ending page. -p, -per-page PER_PAGE Number of log records per page. -v, --verbose Show Level column. reload \u00b6 Aliases: update , up Recreate the app from the bound config file. Invoke after changing the app config to apply the changes. Reload is a shortcut for remove and create : $ sci up myapp App \"myapp\" removed App \"myapp\" created App \"myapp\" bound with config file \"myapp.yml\" remove \u00b6 Aliases: del , rm Remove an app: $ sci rm myapp App \"myapp\" removed trigger \u00b6 Aliases: run , fire Trigger the app to run its actions. If the app doesn't use a provider, this is the only way to run its actions: $ sci run myapp -p foo = bar Actions triggered on test -w, -wait Block and wait for the build to finish. -p, --params param1=value1 param2=value2 ... List of params in the form param=value to be used in the actions. If the app's actions use params extracted from incoming payload, you must provide the necessary param replacements. When you install Sloth CI, two commands are added to your system: sloth-ci and sci . They are identical, and you can use any one you like. We use sc everywhere in the docs for brevity. \u21a9 sci -v shows the version of Sloth CI installed on your machine, i.e., the client, not the version of the server you're connecting to. To know the Sloth CI version on a remote machine, use sci status command. \u21a9","title":"Commands"},{"location":"cli.html#commands","text":"Sloth CI ships with the sci 1 command line utility that lets you control the server and apps with a variety of commands : $ sci COMMAND [ OPTIONS ] ... Some commands have options, e.g. --config , --level . All options have short versions, e.g. -c , -l . Here are the options of the sci command: -c, --config CONFIG Define path to the server config file: # Start Sloth CI with a custom config: $ sci -c path/to/custom_config.yml start -h, --help Show help. Use -h after any command to see its help message. -v, --version Show the version of the locally installed Sloth CI 2 .","title":"Commands"},{"location":"cli.html#commands_1","text":"","title":"Commands"},{"location":"cli.html#start","text":"Start the Sloth CI server: $ sci start Starting Sloth CI on http://localhost:8080","title":"start"},{"location":"cli.html#stop","text":"Stop the Sloth CI server: $ sci stop Stopping Sloth CI on http://localhost:8080","title":"stop"},{"location":"cli.html#restart","text":"Restart, i.e., stop then start the Sloth CI server: $ sci restart Restarting Sloth CI on http://localhost:8080","title":"restart"},{"location":"cli.html#status","text":"Aliases: stat , st Get the status (running or not running) and version of the Sloth CI server: $ sci st Sloth CI version 2 .0.1 is running on http://localhost:8080","title":"status"},{"location":"cli.html#create","text":"Alias: add Create a Sloth CI app from the given config file and bind them: $ sci add myapp.yml App \"myapp\" created App \"myapp\" bound with config file \"myapp.yml\"","title":"create"},{"location":"cli.html#history","text":"Aliases: hist , builds View paginated app build history: $ sci hist -l 10 -p 2 myapp Timestamp Status ------------------------ ------------------------------ Mon Nov 2 21 :47:10 2015 Completed 2 /2 Mon Nov 2 21 :47:05 2015 Triggered, actions in queue: 2 -l, --level LEVEL Minimal log level to show: 40 ERROR, failed builds. 30 WARNING, partially completed builds. 20 (default) INFO, completed builds. 10 DEBUG, trigger events. -f, --from-page FROM_PAGE Pagination starting page. Enumeration start with 1; -f 1 means the latest page. -t, --to-page TO_PAGE Pagination ending page. -p, --per-page PER_PAGE Number of log records per page. -v, --verbose Show Level column.","title":"history"},{"location":"cli.html#info","text":"Show the config file bound with the app and its latest build status: $ sci info myapp Config File Last Build Message Last Build Timestamp ------------ -------------------- ------------------------- myapp.yml Completed 2 /2 Mon Nov 2 21 :47:10 2015","title":"info"},{"location":"cli.html#list","text":"Alias: ls List all available apps' listen points:: $ sci ls myapp myotherapp","title":"list"},{"location":"cli.html#logs","text":"Alias: lg View paginated app logs: $ sci lg -p 3 myapp Timestamp Message ------------------------ -------------------------------- Mon Nov 2 21 :21:58 2015 Bound with config file myapp.yml Mon Nov 2 21 :21:58 2015 Listening on test Mon Nov 2 21 :13:32 2015 Stopped -l, --level LEVEL Minimal log level to show: 50 CRITICAL, errors that don't allow apps to be created, e.g missing validator. 40 ERROR, missing extension and failed builds. 30 WARNING, partially completed builds. 20 (default) INFO, completed builds. 10 DEBUG, stdout and stderr. -f, --from-page FROM_PAGE Pagination starting page. Enumeration start with 1; -f 1 means the latest page. -t, --to-page TO_PAGE Pagination ending page. -p, -per-page PER_PAGE Number of log records per page. -v, --verbose Show Level column.","title":"logs"},{"location":"cli.html#reload","text":"Aliases: update , up Recreate the app from the bound config file. Invoke after changing the app config to apply the changes. Reload is a shortcut for remove and create : $ sci up myapp App \"myapp\" removed App \"myapp\" created App \"myapp\" bound with config file \"myapp.yml\"","title":"reload"},{"location":"cli.html#remove","text":"Aliases: del , rm Remove an app: $ sci rm myapp App \"myapp\" removed","title":"remove"},{"location":"cli.html#trigger","text":"Aliases: run , fire Trigger the app to run its actions. If the app doesn't use a provider, this is the only way to run its actions: $ sci run myapp -p foo = bar Actions triggered on test -w, -wait Block and wait for the build to finish. -p, --params param1=value1 param2=value2 ... List of params in the form param=value to be used in the actions. If the app's actions use params extracted from incoming payload, you must provide the necessary param replacements. When you install Sloth CI, two commands are added to your system: sloth-ci and sci . They are identical, and you can use any one you like. We use sc everywhere in the docs for brevity. \u21a9 sci -v shows the version of Sloth CI installed on your machine, i.e., the client, not the version of the server you're connecting to. To know the Sloth CI version on a remote machine, use sci status command. \u21a9","title":"trigger"},{"location":"extensions.html","text":"Extensions \u00b6 Extensions add new functionality to Sloth CI server and apps. Extensions change the way an app runs actions, add logging, send emails, add new API methods and CLI commands, and much more. There are app extensions and server extensions . App extensions affect only the apps which app config they're declared in. One app can have many app extensions; moreover, it can have the same extension used many times. For example, you can use File Logs extension to write the error log and use the same extension to write the debug log to a different location. Server extensions are invoked in the server config . These extensions change the way Sloth CI server works. For example, Robots.txt extension protects the server from bots; this doesn't affect any particular app but affects the whole server. Another example of a server extension is the Sloth CI API: all web API methods and CLI commands except for cli-start are implemented in an extension. The same extension can work on both app and server levels. Build Email Notifications \u00b6 Send email notifications when builds complete or fail. Executing actions of an app is called build . A build is considered completed if all its actions were completed. If some actions were completed and some failed, it's a partially completed ; if all actions fail, the build failed . This extension sends you emails via SMTP when your builds complete (fully or partially) or fail; just pick the desired notification level, list the recipient emails, and enter your SMTP credentials. Optionally, you can set the subject for each notification level. Installation \u00b6 $ pip install sloth-ci.ext.build_email_notifications Usage \u00b6 extensions : notifications : # Use the module sloth_ci . ext . build_email_notifications . module : build_email_notifications # Emails to send the notifications to . emails : - foo @ bar . com - admin @ example . com # Log level ( number or valid Python logging level name ). # ERROR includes only build fails , WARNING adds partial completions , # INFO adds completion , and DEBUG adds trigger notifications . # Default is WARNING . level : INFO # The \"from\" address in the emails . Default is \"build@sloth.ci.\" from : notify @ example . com # The email subject on build trigger . You can use the { listen_point } placeholder . # Default is \"{listen_point}: Build Triggered.\" subject_triggered : 'Triggered build on {listen_point}!' # The email subject on build completion . You can use the { listen_point } placeholder . # Default is \"{listen_point}: Build Completed.\" subject_completed : 'Hooray! {listen_point} works!' # The email subject on build partial completion . You can use the { listen_point } placeholder . # Default is \"{listen_point}: Build Partially Completed.\" subject_partially_completed : 'Better than nothing on {listen_point}' # The email subject on build fail . You can use the { listen_point } placeholder . # Default is \"{listen_point}: Build Failed.\" subject_failed : 'Fail on {listen_point}' # SMTP settings . # SMTP mail host and ( if not default ) port . # Mandatory parameter . mailhost : 'smtp-mail.outlook.com:25' # SMTP login . login : foo @ bar . baz # SMTP password . password : bar # If the SMTP server requires TLS , set this to true . Default is false . # If necessary , you can provide a keyfile name or a keyfile and a certificate file names . # This param is used only if the login and password params are supplied . secure : true # secure : # - keyfile # - cerfile Dev Tools \u00b6 File Logs \u00b6 Robots.txt \u00b6 Shields.io \u00b6 SSH Exec \u00b6 Webhooks \u00b6","title":"Extensions"},{"location":"extensions.html#extensions","text":"Extensions add new functionality to Sloth CI server and apps. Extensions change the way an app runs actions, add logging, send emails, add new API methods and CLI commands, and much more. There are app extensions and server extensions . App extensions affect only the apps which app config they're declared in. One app can have many app extensions; moreover, it can have the same extension used many times. For example, you can use File Logs extension to write the error log and use the same extension to write the debug log to a different location. Server extensions are invoked in the server config . These extensions change the way Sloth CI server works. For example, Robots.txt extension protects the server from bots; this doesn't affect any particular app but affects the whole server. Another example of a server extension is the Sloth CI API: all web API methods and CLI commands except for cli-start are implemented in an extension. The same extension can work on both app and server levels.","title":"Extensions"},{"location":"extensions.html#build-email-notifications","text":"Send email notifications when builds complete or fail. Executing actions of an app is called build . A build is considered completed if all its actions were completed. If some actions were completed and some failed, it's a partially completed ; if all actions fail, the build failed . This extension sends you emails via SMTP when your builds complete (fully or partially) or fail; just pick the desired notification level, list the recipient emails, and enter your SMTP credentials. Optionally, you can set the subject for each notification level.","title":"Build Email Notifications"},{"location":"extensions.html#installation","text":"$ pip install sloth-ci.ext.build_email_notifications","title":"Installation"},{"location":"extensions.html#usage","text":"extensions : notifications : # Use the module sloth_ci . ext . build_email_notifications . module : build_email_notifications # Emails to send the notifications to . emails : - foo @ bar . com - admin @ example . com # Log level ( number or valid Python logging level name ). # ERROR includes only build fails , WARNING adds partial completions , # INFO adds completion , and DEBUG adds trigger notifications . # Default is WARNING . level : INFO # The \"from\" address in the emails . Default is \"build@sloth.ci.\" from : notify @ example . com # The email subject on build trigger . You can use the { listen_point } placeholder . # Default is \"{listen_point}: Build Triggered.\" subject_triggered : 'Triggered build on {listen_point}!' # The email subject on build completion . You can use the { listen_point } placeholder . # Default is \"{listen_point}: Build Completed.\" subject_completed : 'Hooray! {listen_point} works!' # The email subject on build partial completion . You can use the { listen_point } placeholder . # Default is \"{listen_point}: Build Partially Completed.\" subject_partially_completed : 'Better than nothing on {listen_point}' # The email subject on build fail . You can use the { listen_point } placeholder . # Default is \"{listen_point}: Build Failed.\" subject_failed : 'Fail on {listen_point}' # SMTP settings . # SMTP mail host and ( if not default ) port . # Mandatory parameter . mailhost : 'smtp-mail.outlook.com:25' # SMTP login . login : foo @ bar . baz # SMTP password . password : bar # If the SMTP server requires TLS , set this to true . Default is false . # If necessary , you can provide a keyfile name or a keyfile and a certificate file names . # This param is used only if the login and password params are supplied . secure : true # secure : # - keyfile # - cerfile","title":"Usage"},{"location":"extensions.html#dev-tools","text":"","title":"Dev Tools"},{"location":"extensions.html#file-logs","text":"","title":"File Logs"},{"location":"extensions.html#robotstxt","text":"","title":"Robots.txt"},{"location":"extensions.html#shieldsio","text":"","title":"Shields.io"},{"location":"extensions.html#ssh-exec","text":"","title":"SSH Exec"},{"location":"extensions.html#webhooks","text":"","title":"Webhooks"},{"location":"server_config.html","text":"Server Config \u00b6","title":"Server Config"},{"location":"server_config.html#server-config","text":"","title":"Server Config"},{"location":"validators.html","text":"Validators \u00b6 To run actions, the app must receive some sort of trigger request, e.g., a push notification from GitHub. The app checks all incoming requests, and only the ones that pass the check trigger actions. The requests usually contain data that should be passed to the actions, i.e., branch name, so the app must extract the data after the check. In Sloth CI, a source of trigger requests is called provider ; e.g., GitHub, Bitbucket, and GitLab are providers. Each provider uses its own request format and thus requires its own validation and data extraction routine. Validator implements request checking and data extraction for a particular provider. To add support of a new provider to Sloth CI, we just create a corresponding validator. Github \u00b6 Sloth CI validator for GitHub push events. Installation \u00b6 $ pip install sloth-ci.validators.github Usage \u00b6 provider : github : # Repository owner . Mandatory parameter . owner : moigagoo # Repository title as it appears in the URL , i . e . slug . # Mandatory parameter . repo : sloth - ci # Only pushes to these branches will initiate a build . # Skip this parameter to allow all branches to fire builds . branches : - master - staging Bitbucket \u00b6 Sloth CI validator for Bitbucket push events. Installation \u00b6 $ pip install sloth-ci.validators.bitbucket Usage \u00b6 provider : bitbucket : # Repository owner . Mandatory parameter . owner : moigagoo # Repository title as it appears in the URL , i . e . slug . # Mandatory parameter . repo : sloth - ci # Only pushes to these branches will initiate a build . # Skip this parameter to allow all branches to fire builds . branches : - master - staging GitLab \u00b6 Sloth CI validator for GitLab push events. Installation \u00b6 $ pip install sloth-ci.validators.gitlab Usage \u00b6 provider : gitlab : # Whitelisted GitLab server IPs . # Mandatory parameter . trusted_ips : - 123.45 . 67.89 - 111.22 . 33.44 # Repository title as it appears in the URL , i . e . slug . # Mandatory parameter . repo : sloth - ci # Only pushes to these branches will initiate a build . # Skip this parameter to allow all branches to fire builds . branches : - master - staging","title":"Validators"},{"location":"validators.html#validators","text":"To run actions, the app must receive some sort of trigger request, e.g., a push notification from GitHub. The app checks all incoming requests, and only the ones that pass the check trigger actions. The requests usually contain data that should be passed to the actions, i.e., branch name, so the app must extract the data after the check. In Sloth CI, a source of trigger requests is called provider ; e.g., GitHub, Bitbucket, and GitLab are providers. Each provider uses its own request format and thus requires its own validation and data extraction routine. Validator implements request checking and data extraction for a particular provider. To add support of a new provider to Sloth CI, we just create a corresponding validator.","title":"Validators"},{"location":"validators.html#github","text":"Sloth CI validator for GitHub push events.","title":"Github"},{"location":"validators.html#installation","text":"$ pip install sloth-ci.validators.github","title":"Installation"},{"location":"validators.html#usage","text":"provider : github : # Repository owner . Mandatory parameter . owner : moigagoo # Repository title as it appears in the URL , i . e . slug . # Mandatory parameter . repo : sloth - ci # Only pushes to these branches will initiate a build . # Skip this parameter to allow all branches to fire builds . branches : - master - staging","title":"Usage"},{"location":"validators.html#bitbucket","text":"Sloth CI validator for Bitbucket push events.","title":"Bitbucket"},{"location":"validators.html#installation_1","text":"$ pip install sloth-ci.validators.bitbucket","title":"Installation"},{"location":"validators.html#usage_1","text":"provider : bitbucket : # Repository owner . Mandatory parameter . owner : moigagoo # Repository title as it appears in the URL , i . e . slug . # Mandatory parameter . repo : sloth - ci # Only pushes to these branches will initiate a build . # Skip this parameter to allow all branches to fire builds . branches : - master - staging","title":"Usage"},{"location":"validators.html#gitlab","text":"Sloth CI validator for GitLab push events.","title":"GitLab"},{"location":"validators.html#installation_2","text":"$ pip install sloth-ci.validators.gitlab","title":"Installation"},{"location":"validators.html#usage_2","text":"provider : gitlab : # Whitelisted GitLab server IPs . # Mandatory parameter . trusted_ips : - 123.45 . 67.89 - 111.22 . 33.44 # Repository title as it appears in the URL , i . e . slug . # Mandatory parameter . repo : sloth - ci # Only pushes to these branches will initiate a build . # Skip this parameter to allow all branches to fire builds . branches : - master - staging","title":"Usage"}]}